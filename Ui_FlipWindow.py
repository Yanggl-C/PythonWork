# -*- coding: utf-8 -*-
import os.path

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QVBoxLayout,QDialog,QPushButton,QLabel,QLineEdit,QMessageBox,QTextEdit,QHBoxLayout,QSizePolicy
from PyQt5.QtGui import QPalette
import sys
import os
import xml.etree.ElementTree as ET
from PyQt5.QtCore import Qt, pyqtSignal

BASE_DIR = os.path.dirname(os.path.realpath(sys.argv[0]))
class Ui_FlipWindow(QDialog):

    Signal_flipcode = pyqtSignal(int)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.init_ui()
    def init_ui(self):
        """
        初始化对话框
        :return:
        """
        self.setWindowTitle("FlipSetting")
        self.resize(200,100)
        layout = QVBoxLayout()

        self.check_box_x = QtWidgets.QCheckBox()
        self.check_box_y = QtWidgets.QCheckBox()
        self.check_box_xy = QtWidgets.QCheckBox()

        map_layout = QHBoxLayout()
        map_layout.addStretch()
        # 范围显示label1
        label_flip_map =  QLabel()
        flipmap = QtGui.QPixmap(os.path.join(BASE_DIR,'ico',"FlipA.png"))
        label_flip_map.setPixmap(flipmap)
        label_flip_map.setScaledContents(True)
        label_flip_map.setGeometry(QtCore.QRect(0, 0, 50, 50))
        map_layout.addWidget(label_flip_map)
        map_layout.addStretch()
        layout.addLayout(map_layout)
        #标签
        lbl = QLabel()
        lbl.setText('旋转方式:')
        layout.addWidget(lbl)
        #映射范围
        map_layout = QHBoxLayout()
        self.check_box_x.setText('X轴旋转')
        self.check_box_x.setChecked(False)
        self.check_box_x.stateChanged.connect(self.check_box_x_changed)
        map_layout.addWidget(self.check_box_x)
        self.check_box_y.setText('Y轴旋转')
        self.check_box_y.setChecked(False)
        self.check_box_y.stateChanged.connect(self.check_box_y_changed)
        map_layout.addWidget(self.check_box_y)
        self.check_box_xy.setText('XY轴旋转')
        self.check_box_xy.setChecked(False)
        self.check_box_xy.stateChanged.connect(self.check_box_xy_changed)
        map_layout.addWidget(self.check_box_xy)
        layout.addLayout(map_layout)


        self.setLayout(layout)
    def check_box_x_changed(self):
        if self.check_box_x.isChecked():
            self.Signal_flipcode.emit(0)
            self.check_box_y.setChecked(False)
            self.check_box_xy.setChecked(False)
        elif self.check_box_y.isChecked() == False and self.check_box_y.isChecked() == False and self.check_box_xy.isChecked() ==False:
            self.Signal_flipcode.emit(2)
    def check_box_y_changed(self):
        if self.check_box_y.isChecked():
            self.Signal_flipcode.emit(1)
            self.check_box_x.setChecked(False)
            self.check_box_xy.setChecked(False)
        elif self.check_box_y.isChecked() == False and self.check_box_y.isChecked() == False and self.check_box_xy.isChecked() == False:
            self.Signal_flipcode.emit(2)
    def check_box_xy_changed(self):
        if self.check_box_xy.isChecked():
            self.Signal_flipcode.emit(-1)
            self.check_box_x.setChecked(False)
            self.check_box_y.setChecked(False)
        elif self.check_box_y.isChecked() == False and self.check_box_y.isChecked() == False and self.check_box_xy.isChecked() == False:
            self.Signal_flipcode.emit(2)



