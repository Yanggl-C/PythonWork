# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QtTest.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys

from PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QHBoxLayout, QVBoxLayout, QMessageBox, \
    QGraphicsPixmapItem
from PyQt5.QtWidgets import QPushButton, QLineEdit, QTableWidget, QTableWidgetItem, QLabel
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMenu
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
import numpy as np
import copy
import cv2
# 资源管理器
import tkinter as tk
from tkinter import filedialog

from copy import deepcopy

BASE_DIR = os.path.dirname(os.path.realpath(sys.argv[0]))


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1215, 677)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 0, 581, 111))
        self.groupBox.setObjectName("groupBox")
        self.cmb_algorithm = QtWidgets.QComboBox(self.groupBox)
        self.cmb_algorithm.setGeometry(QtCore.QRect(10, 70, 441, 31))
        self.cmb_algorithm.setObjectName("cmb_algorithm")
        self.txt_PathShow = QtWidgets.QTextEdit(self.groupBox)
        self.txt_PathShow.setGeometry(QtCore.QRect(10, 20, 441, 31))
        self.txt_PathShow.setObjectName("txt_PathShow")
        self.btn_ReadPath = QtWidgets.QPushButton(self.groupBox)
        self.btn_ReadPath.setGeometry(QtCore.QRect(460, 20, 111, 31))
        self.btn_ReadPath.setObjectName("btn_ReadPath")
        self.label1 = QtWidgets.QLabel(self.groupBox)
        self.label1.setGeometry(QtCore.QRect(10, 50, 121, 21))
        self.label1.setObjectName("label1")
        self.btn_procressimg = QtWidgets.QPushButton(self.groupBox)
        self.btn_procressimg.setGeometry(QtCore.QRect(460, 70, 111, 31))
        self.btn_procressimg.setObjectName("btn_procressimg")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(610, 0, 581, 111))
        self.groupBox_2.setObjectName("groupBox_2")
        self.cmb_algorithm_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.cmb_algorithm_2.setGeometry(QtCore.QRect(10, 70, 441, 31))
        self.cmb_algorithm_2.setObjectName("cmb_algorithm_2")
        self.txt_PathShow_2 = QtWidgets.QTextEdit(self.groupBox_2)
        self.txt_PathShow_2.setGeometry(QtCore.QRect(10, 20, 441, 31))
        self.txt_PathShow_2.setObjectName("txt_PathShow_2")
        self.btn_ReadPath_2 = QtWidgets.QPushButton(self.groupBox_2)
        self.btn_ReadPath_2.setGeometry(QtCore.QRect(460, 20, 111, 31))
        self.btn_ReadPath_2.setObjectName("btn_ReadPath_2")
        self.label1_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label1_2.setGeometry(QtCore.QRect(10, 50, 121, 21))
        self.label1_2.setObjectName("label1_2")
        self.btn_procressimg_2 = QtWidgets.QPushButton(self.groupBox_2)
        self.btn_procressimg_2.setGeometry(QtCore.QRect(460, 70, 111, 31))
        self.btn_procressimg_2.setObjectName("btn_procressimg_2")
        self.lab_showImg_2 = QtWidgets.QLabel(self.centralwidget)
        self.lab_showImg_2.setGeometry(QtCore.QRect(610, 120, 581, 491))
        self.lab_showImg_2.setObjectName("lab_showImg_2")
        self.lab_showImg = QtWidgets.QLabel(self.centralwidget)
        self.lab_showImg.setGeometry(QtCore.QRect(10, 120, 581, 491))
        self.lab_showImg.setObjectName("lab_showImg")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1215, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.txt_PathShow, self.btn_ReadPath)
        MainWindow.setTabOrder(self.btn_ReadPath, self.cmb_algorithm)
        MainWindow.setTabOrder(self.cmb_algorithm, self.txt_PathShow_2)
        MainWindow.setTabOrder(self.txt_PathShow_2, self.btn_ReadPath_2)
        MainWindow.setTabOrder(self.btn_ReadPath_2, self.cmb_algorithm_2)
        # 变量
        self.img = None
        self.img2 = None
        self.img_cp = None
        self.img_cp2 = None

        self.file_path = None
        self.file_path2 = None
        # 添加事件
        self.btn_ReadPath.clicked.connect(self.btn_ReadPath_clicked)
        self.btn_ReadPath_2.clicked.connect(self.btn_ReadPath_2_clicked)

        self.btn_procressimg.clicked.connect(self.btn_procressimg_clicked)
        self.btn_procressimg_2.clicked.connect(self.btn_procressimg_2_clicked)
        # 读取算法
        import json
        file_json = os.path.join(BASE_DIR, 'db', 'algorithm1.json')
        with open(file_json, mode='r', encoding='utf-8') as f:
            data = f.read()
        data_list = json.loads(data)
        for idx, lista in enumerate(data_list):
            self.cmb_algorithm.addItem(lista)
            self.cmb_algorithm_2.addItem(lista)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "读取图片"))
        self.btn_ReadPath.setText(_translate("MainWindow", "加载图像"))
        self.label1.setText(_translate("MainWindow", "算法选择:"))
        self.btn_procressimg.setText(_translate("MainWindow", "处理"))
        self.groupBox_2.setTitle(_translate("MainWindow", "读取图片"))
        self.btn_ReadPath_2.setText(_translate("MainWindow", "加载图像"))
        self.label1_2.setText(_translate("MainWindow", "算法选择:"))
        self.btn_procressimg_2.setText(_translate("MainWindow", "处理"))
        self.lab_showImg_2.setText(_translate("MainWindow", "TextLabel"))
        self.lab_showImg.setText(_translate("MainWindow", "TextLabel"))

    def btn_ReadPath_clicked(self):
        '''
        按钮事件
        读取图像文件路径
        :return:
        '''
        file_path = self.read_filepath()
        if file_path.endswith('jpg') or file_path.endswith('png') or file_path.endswith('bmp'):
            if self.is_contains_chinese(file_path):
                QMessageBox.warning(None, '错误', "路径中含有中文字符")
                return
            self.txt_PathShow.setText('{}'.format(file_path))
            self.file_path = file_path
        else:
            QMessageBox.warning(None, "错误", "请选择图片文件")
            return
        # 读取图像
        self.img = cv2.imread(self.file_path)
        # 图片转化
        self.show_img(False, self.img, self.lab_showImg)
    def btn_ReadPath_2_clicked(self):
        '''
        按钮事件
        读取图像文件路径
        :return:
        '''
        file_path = self.read_filepath()
        if file_path.endswith('jpg') or file_path.endswith('png') or file_path.endswith('bmp'):
            if self.is_contains_chinese(file_path):
                QMessageBox.warning(None, '错误', "路径中含有中文字符")
                return
            self.txt_PathShow_2.setText('{}'.format(file_path))
            self.file_path2 = file_path
        else:
            QMessageBox.warning(None, "错误", "请选择图片文件")
            return
        # 读取图像
        self.img2 = cv2.imread(self.file_path2)
        # 图片转化
        self.show_img(False, self.img2, self.lab_showImg_2)

    def btn_procressimg_clicked(self):
        str_algorithm = self.cmb_algorithm.currentText()
        if self.file_path == '' or self.img is None:
            return
        self.img_cp = deepcopy(self.img)
        algorithm = Algorithm()
        if str_algorithm == "Bgr2Gray":
            gray = algorithm.Bgr2Gray(self.img_cp)
            if gray is not None:
                self.show_img(True, gray, self.lab_showImg)
        elif str_algorithm == "Bgr2YUV":
            yuv = algorithm.Bgr2YUV(self.img_cp)
            if yuv is not None:
                self.show_img(False, yuv, self.lab_showImg)
        elif str_algorithm == "Bgr2HSV":
            hsv = algorithm.Bgr2HSV(self.img_cp)
            if hsv is not None:
                self.show_img(False, hsv, self.lab_showImg)
        elif str_algorithm == 'Bgr2Lab':
            lab = algorithm.Bgr2Lab(self.img_cp)
            if lab is not None:
                self.show_img(False, lab, self.lab_showImg)
        elif  str_algorithm == 'MinMaxLoc':
            show_img = algorithm.MinMaxLoc(self.img_cp)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'Mean':
            show_img = algorithm.Mean(self.img_cp)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'MeanstdDev':
            show_img = algorithm.MeanstdDev(self.img_cp)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'Max':
            if self.file_path2 == '' or self.img2 is None:
                QMessageBox.warning(None,'错误','请加载另一个图像！')
                return
            show_img = algorithm.Max(self.img_cp,self.img2)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'Min':
            if self.file_path2 == '' or self.img2 is None:
                QMessageBox.warning(None,'错误','请加载另一个图像！')
                return
            show_img = algorithm.Min(self.img_cp,self.img2)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'bitwise_and':
            if self.file_path2 == '' or self.img2 is None:
                QMessageBox.warning(None,'错误','请加载另一个图像！')
                return
            show_img = algorithm.bitwise_and(self.img_cp,self.img2)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'bitwise_or':
            if self.file_path2 == '' or self.img2 is None:
                QMessageBox.warning(None,'错误','请加载另一个图像!')
                return
            show_img = algorithm.bitwise_or(self.img_cp,self.img2)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'bitwise_xor':
            if self.file_path2 == '' or self.img2 is None:
                QMessageBox.warning(None, '错误', '请加载另一个图像!')
                return
            show_img = algorithm.bitwise_xor(self.img_cp, self.img2)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)
        elif str_algorithm == 'bitwise_not':
            show_img = algorithm.bitwise_not(self.img_cp)
            if show_img is not None:
                self.show_img(False, show_img, self.lab_showImg)

    def btn_procressimg_2_clicked(self):
        pass

    def show_img(self,gray, img, console):
        '''
        图片显示
        :param img: 图片
        :param console: 显示图片控件
        :return:
        '''
        if gray:
            frame = QtGui.QImage(img.data, img.shape[1], img.shape[0], img.strides[0],
                                 QtGui.QImage.Format_Indexed8)
        else:
            frame = QtGui.QImage(img.data, img.shape[1], img.shape[0], img.strides[0],
                             QtGui.QImage.Format_BGR888)
        pix = QtGui.QPixmap.fromImage(frame)
        console.setPixmap(pix)
        console.update()
    def is_contains_chinese(self, strs):
        '''
        是否有中文字符
        :param strs:路径字符串
        :return:
        '''
        for _char in strs:
            if '\u4e00' <= _char <= '\u9fa5':
                return True
        return False
    def read_filepath(self):
        '''
        读取文件
        :return:文件路径
        '''
        root = tk.Tk()
        root.withdraw()

        file_path = filedialog.askopenfilename(
            filetypes=[('png', '*.png'), ('jpg', '*.jpg'), ('bmp', '*.bmp'), ('所有文件', '*.*')])
        if file_path == '' or file_path == None:
            QMessageBox.warning(None, "错误", "请选择图片文件")
            return
        return file_path

class Algorithm(object):
    def Bgr2Gray(self, rec_img):
        '''
        彩色图转化为灰度图
        :param rec_img: 图像
        :return: 处理后的图像
        '''
        try:
            if len(rec_img.shape) == 2:
                return
            return cv2.cvtColor(rec_img, cv2.COLOR_BGR2GRAY)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{e}".format(str(e)))
            return
    def Bgr2YUV(self, rec_img):
        '''
        彩色图转化为YUV
        :param rec_img: 图像
        :return: 处理后的图像
        '''
        try:
            yuv = cv2.cvtColor(rec_img,cv2.COLOR_RGB2YUV)
            y,u,v = cv2.split(yuv)
            cv2.imshow('y',y)
            cv2.imshow('u',u)
            cv2.imshow('v',v)
            return yuv
        except Exception as e:
            QMessageBox.warning(None, "错误", "{e}".format(str(e)))
            return
    def Bgr2HSV(self, rec_img):
        '''
        彩色图转化为HSV
        :param rec_img: 图像
        :return: 处理后的图像
        '''
        try:
            hsv =  cv2.cvtColor(rec_img, cv2.COLOR_BGR2HSV)
            h,s,v = cv2.split(hsv)
            cv2.imshow('h',h)
            cv2.imshow('s',s)
            cv2.imshow('v',v)
            return hsv
        except Exception as e:
            QMessageBox.warning(None, "错误", "{e}".format(str(e)))
            return
    def Bgr2Lab(self, rec_img):
        '''
        彩色图转化为Lab
        :param rec_img: 图像
        :return: 处理后的图像
        '''
        try:
            lab = cv2.cvtColor(rec_img, cv2.COLOR_BGR2LAB)
            l,a,b = cv2.split(lab)
            cv2.imshow('l',l)
            cv2.imshow('a',a)
            cv2.imshow('b',b)
            return lab
        except Exception as e:
            QMessageBox.warning(None, "错误", "{e}".format(str(e)))
            return
    def MinMaxLoc(self,rec_img):
        '''
        获取最大最小値
        :param rec_img: 图像
        :return:处理后的图像
        '''
        try:
            img = rec_img.reshape((1,-1))
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(img)
            cv2.putText(rec_img,'minVal{}'.format(min_val,3),(0,30),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'maxVal{}'.format(max_val,3),(0,60),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'minVallLoc{}'.format(min_loc,3),(0,90),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'maxValLoc{}'.format(max_loc,3),(0,120),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            return rec_img
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def Mean(self,rec_img):
        '''
        图像平均值
        :param rec_img: 图像
        :return: 处理后的图像
        '''
        try:
            mean = cv2.mean(rec_img)
            mean1 = mean[0]
            mean2 = mean[1]
            mean3 = mean[2]
            cv2.putText(rec_img,'Channel1Mean{}'.format(round(mean1,3)),(0,30),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel2Mean{}'.format(round(mean2,3)),(0,60),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel3Mean{}'.format(round(mean3,3)),(0,90),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            return rec_img
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def MeanstdDev(self,rec_img):
        '''
        图像均值标准差
        :param rec_img: 图像
        :return: 处理后的图像
        '''
        try:
            mean, stddev = cv2.meanStdDev(rec_img)
            mean1 = mean[0]
            mean2 = mean[1]
            mean3 = mean[2]
            stddev1 = stddev[0]
            stddev2 = stddev[1]
            stddev3 = stddev[2]
            cv2.putText(rec_img,'Channel1Mean{}'.format(round(float(mean1),3)),(0,30),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel2Mean{}'.format(round(float(mean2),3)),(0,60),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel3Mean{}'.format(round(float(mean3),3)),(0,90),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel1StdDev{}'.format(stddev1),(0,120),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel2StdDev{}'.format(stddev2),(0,150),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            cv2.putText(rec_img,'Channel3StdDev{}'.format(stddev3),(0,180),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,255,0),1)
            return rec_img
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def Max(self,rec_img1,rec_img2):
        '''
        两图像最大值
        :param rec_img1:图像1
        :param rec_img2:图像2
        :return:返回最大图像
        '''
        try:
            if rec_img1.shape != rec_img2.shape:
                if rec_img1.shape > rec_img2.shape:
                    rec_img1 = cv2.resize(rec_img1, (rec_img2.shape[1], rec_img2.shape[0]), cv2.INTER_AREA)
                else:
                    rec_img2 = cv2.resize(rec_img2, (rec_img1.shape[1], rec_img1.shape[0]), cv2.INTER_AREA)
            return cv2.max(rec_img1, rec_img2)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def Min(self,rec_img1,rec_img2):
        '''
        两图像最小値
        :param rec_img1:图像1
        :param rec_img2:图像2
        :return:返回最小图像
        '''
        try:
            if rec_img1.shape != rec_img2.shape:
                if rec_img1.shape > rec_img2.shape:
                    rec_img1 = cv2.resize(rec_img1, (rec_img2.shape[1], rec_img2.shape[0]), cv2.INTER_AREA)
                else:
                    rec_img2 = cv2.resize(rec_img2, (rec_img1.shape[1], rec_img1.shape[0]), cv2.INTER_AREA)
            return cv2.min(rec_img1, rec_img2)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def bitwise_and(self,rec_img1,rec_img2):
        '''
        两图像位进进行与操位
        :param rec_img1:图像1
        :param rec_img2:图像2
        :return:返回两图像位与操作结果
        '''
        try:
            if rec_img1.shape != rec_img2.shape:
                if rec_img1.shape > rec_img2.shape:
                    rec_img1 = cv2.resize(rec_img1, (rec_img2.shape[1], rec_img2.shape[0]), cv2.INTER_AREA)
                else:
                    rec_img2 = cv2.resize(rec_img2, (rec_img1.shape[1], rec_img1.shape[0]), cv2.INTER_AREA)
            return cv2.bitwise_and(rec_img1, rec_img2)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def bitwise_or(self,rec_img1,rec_img2):
        '''
        两图像位进进行或操位
        :param rec_img1:图像1
        :param rec_img2:图像2
        :return:返回两图像位或操�结果
        '''
        try:
            if rec_img1.shape != rec_img2.shape:
                if rec_img1.shape > rec_img2.shape:
                    rec_img1 = cv2.resize(rec_img1, (rec_img2.shape[1], rec_img2.shape[0]), cv2.INTER_AREA)
                else:
                    rec_img2 = cv2.resize(rec_img2, (rec_img1.shape[1], rec_img1.shape[0]), cv2.INTER_AREA)
            return cv2.bitwise_or(rec_img1, rec_img2)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def bitwise_xor(self,rec_img1,rec_img2):
        '''
        两图像位进进行差操位
        :param rec_img1:图像1
        :param rec_img2:图像2
        :return:返回两图像位差操�结果
        '''
        try:
            if rec_img1.shape != rec_img2.shape:
                if rec_img1.shape > rec_img2.shape:
                    rec_img1 = cv2.resize(rec_img1, (rec_img2.shape[1], rec_img2.shape[0]), cv2.INTER_AREA)
                else:
                    rec_img2 = cv2.resize(rec_img2, (rec_img1.shape[1], rec_img1.shape[0]), cv2.INTER_AREA)
            return cv2.bitwise_xor(rec_img1, rec_img2)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def bitwise_not(self,rec_img):
        '''
        两图像位进进行取反操位
        :param rec_img:图像
        :return:返回图像取反结果
        '''
        try:
            return cv2.bitwise_not(rec_img)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return
    def Threshold(self,rec_img,thresh,maxval):
        '''
        两图像位进进行阈値操位
        :param rec_img:图像
        :param thresh:阈値
        :param maxval:最大値
        :return:返回图像阈値操位结果
        '''
        try:
            return cv2.threshold(rec_img, thresh, maxval, cv2.THRESH_BINARY)
        except Exception as e:
            QMessageBox.warning(None, "错误", "{}".format(str(e)))
            return